services:
  db:
    image: supabase/postgres:15.1.1.20
    container_name: cli-arena-mobile-expo-db-1
    ports:
      - "54322:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_strong_password
      POSTGRES_DB: postgres
    volumes:
      - supabase_db_data:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/10-schema.sql:ro
      - ./db/seed.sql:/docker-entrypoint-initdb.d/20-seed.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth:
    image: supabase/gotrue:v2.120.0
    environment:
      GOTRUE_API_HOST: "0.0.0.0"
      GOTRUE_API_PORT: "9999"
      GOTRUE_DB_DRIVER: "postgres"
      GOTRUE_DB_DATABASE_URL: "postgresql://postgres:your_strong_password@db:5432/postgres"
      GOTRUE_JWT_SECRET: "your-super-secret-jwt-token-with-at-least-32-characters-long"
      GOTRUE_JWT_EXP: "3600"
    depends_on:
      db:
        condition: service_healthy

  rest:
    image: postgrest/postgrest:v11.2.2
    environment:
      PGRST_DB_URI: "postgresql://postgres:your_strong_password@db:5432/postgres"
      PGRST_DB_SCHEMA: "public,storage"
      PGRST_DB_ANON_ROLE: "anon"
    depends_on:
      db:
        condition: service_healthy

  realtime:
    image: supabase/realtime:v2.20.0
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: your_strong_password
      DB_NAME: postgres
      DB_SSL: "false"
      PORT: 4000
    depends_on:
      db:
        condition: service_healthy

  storage-api:
    image: ghcr.io/supabase/storage-api:v1.25.3
    environment:
      STORAGE_BACKEND: "file"
      FILE_STORAGE_BACKEND_PATH: "/var/lib/storage"
      TENANT_ID: "stub"
    volumes:
      - supabase_storage_data:/var/lib/storage
    depends_on:
      db:
        condition: service_healthy

  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
      auth:
        condition: service_started
      rest:
        condition: service_started
      realtime:
        condition: service_started
      storage-api:
        condition: service_started

volumes:
  supabase_db_data: {}
  supabase_storage_data: {}
