#!/usr/bin/env bash
set -euo pipefail

echo "üî• Verifying 'Patch a Critical Security Vulnerability' Task"
echo "=========================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

FAILED=0

# --- Verification Steps ---

# 1. Check the pom.xml for the updated dependency version
echo "1. Checking pom.xml for the updated log4j-core version..."
# A bit of XML parsing with grep and sed to extract the version
LOG4J_VERSION=$(grep -A 2 -B 1 "<artifactId>log4j-core</artifactId>" app/pom.xml | grep version | sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' | tr -d '[:space:]')

if [[ -z "$LOG4J_VERSION" ]]; then
    echo -e "${RED}‚ùå Could not find the version for log4j-core in pom.xml.${NC}"
    FAILED=1
else
    # Compare versions. We need to be careful with version string comparison.
    # We'll check if the version is NOT one of the known vulnerable ones.
    # A simple string comparison works for the expected solution.
    if [[ "$LOG4J_VERSION" == "2.17.1" || "$LOG4J_VERSION" == "2.18.0" || "$LOG4J_VERSION" == "2.19.0" || "$LOG4J_VERSION" == "6.0" ]]; then
        echo -e "${GREEN}‚úÖ log4j-core version is updated to a safe version ($LOG4J_VERSION).${NC}"
    else
        echo -e "${RED}‚ùå log4j-core version is '$LOG4J_VERSION', which is not a recognized safe version. Expected >=2.17.1.${NC}"
        FAILED=1
    fi
fi

# 2. Compile the application using Maven
echo "2. Compiling the application with 'mvn compile'..."
if mvn -f app/pom.xml compile > /tmp/mvn_compile.log 2>&1; then
    echo -e "${GREEN}‚úÖ Application compiled successfully.${NC}"
else
    echo -e "${RED}‚ùå Maven compilation failed. Check the logs below.${NC}"
    cat /tmp/mvn_compile.log
    FAILED=1
fi

# 3. Run the regression tests using Maven
echo "3. Running regression tests with 'mvn test'..."
if mvn -f app/pom.xml test > /tmp/mvn_test.log 2>&1; then
    echo -e "${GREEN}‚úÖ All regression tests passed.${NC}"
else
    echo -e "${RED}‚ùå Regression tests failed. Your change might have broken existing functionality.${NC}"
    cat /tmp/mvn_test.log
    FAILED=1
fi

# --- Final Summary ---
echo "------------------------------------------------------"
if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ All verification checks passed! The vulnerability has been patched!${NC}"
    exit 0
else
    echo -e "${RED}‚ùå Some verification checks failed. Please review the errors above.${NC}"
    exit 1
fi
